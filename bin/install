#!/usr/bin/env bash

set -e
set -o pipefail
# set -x

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version}
[ -n "$ASDF_INSTALL_VERSION" ] || (>&2 echo 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (>&2 echo 'Missing ASDF_INSTALL_PATH' && exit 1)

install_plugin() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local download_url="$(get_download_url $install_type $version)"
  local tmp_download=$(mktemp -d)

  echo "Downloading sonar-scanner-cli from $download_url"
  pushd $tmp_download > /dev/null
  curl -L -s "$download_url" -o "download.zip"
  unzip "download.zip" > /dev/null || exit 1

  pushd "sonar-scanner-${version}-$(get_platform $version)" > /dev/null
  cp -r . $install_path
  popd > /dev/null

  popd > /dev/null

  rm -rf $tmp_download > /dev/null
}

semVer() {
  printf "%03d%03d%03d%03d" $(echo "$1" | tr '.' ' ');
}

get_platform() {
  local version=$1
  local breakingVersion="6.1.0.4477"

  case $(uname) in
    #Linux OS
    Linux)
      if [[ $(semVer $version) -lt $(semVer $breakingVersion) ]]; then
        echo "linux"
      elif [ "$(uname -m)" = "aarch64" ]; then
        echo "linux-aarch64"
      else
        echo "linux-x64"
      fi
    ;;
    #Mac OS
    Darwin)
      if [[ $(semVer $version) -lt $(semVer $breakingVersion) ]]; then
        echo "macosx"
      elif [ "$(uname -m)" = "arm64" ]; then
        echo "macosx-aarch64"
      else
        echo "macosx-x64"
      fi
    ;;
  esac
}

get_download_url() {
  local install_type=$1
  local version=$2

  local platform=$(get_platform $version)
  echo "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${version}-${platform}.zip"
}

install_plugin "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
